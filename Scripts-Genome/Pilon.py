# Import necessary library
import subprocess


def run_pilon(genome_path, frags_bam, nanopore_bam, output_prefix, output_dir, diploid, threads):
    """
    Automate the execution of Pilon for genome assembly improvement and variant detection.

    Args:
    genome_path (str): Path to the input genome FASTA file.
    frags_bam (str): Path to the BAM file of aligned fragmented reads.
    nanopore_bam (str): Path to the BAM file of aligned long reads (Nanopore).
    output_prefix (str): Prefix for the output files generated by Pilon.
    output_dir (str): Directory to store the output files from Pilon.
    diploid (bool): Flag to indicate if the organism is diploid or not.
    threads (int): Number of threads to use for Pilon.

    Returns:
    None: This function prints outputs directly and manages files without returning.
    """
    # Construct the Pilon command
    command = [
        'pilon',
        '--genome', genome_path,
        '--frags', frags_bam,
        '--nanopore', nanopore_bam,
        '--output', output_prefix,
        '--outdir', output_dir,
        '--threads', str(threads)
    ]

    # Add the diploid flag if the organism is diploid
    if diploid:
        command.append('--diploid')

    # Execute the command
    try:
        result = subprocess.run(command, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        print(f"Output: {result.stdout}")
    except subprocess.CalledProcessError as e:
        print(f"Error: {e.stderr}")

